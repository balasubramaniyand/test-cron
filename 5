pipeline {
    agent any
    
    parameters {
        choice (
            choices:['main', 'devops'],
            description: 'Branch to build',
            name: 'branch'
        )
        choice (
            choices:['10.20.245.106', '10.20.245.99'],
            description: 'IP Address to deploy',
            name: 'IP_ADDRESS'
        )
        choice (
            choices:['balasubramaniyan.d', 'root'],
            description: 'Username for SSH',
            name: 'USERNAME'
        )
    }
    
    triggers {
        cron('H/10 * * * *') // Runs every 10 minutes
    }
    
    stages {
        stage('Clone') {
            when {
                changeset 'branches: ["${params.branch}"]'
            }
            steps {
                script {
                    try {
                        git credentialsId: 'gitlab', url: 'https://pexgit.growipx.com/supportfirst/supportfirst-api-service.git', branch: "${params.branch}"
                    } catch (Exception e) {
                        error "Failed to clone repository: ${e.message}"
                    }
                }
            }
        }
        
        stage('Maven Build') {
            steps {
                script {
                    try {
                        dir('/var/lib/Jenkins/workspace/email') {
                            def mvnHome = tool name: 'Maven', type: 'maven'
                            sh "${mvnHome}/bin/mvn clean install"
                        }
                    } catch (Exception e) {
                        error "Maven build failed: ${e.message}"
                    }
                }
            }
        }
        
        stage('File Rename') {
            steps {
                script {
                    try {
                        sh "ssh -p 7774 ${params.USERNAME}@${params.IP_ADDRESS} 'cd /opt/supportfirst/test && sh -x test.sh'"
                    } catch (Exception e) {
                        error "Failed to execute file rename: ${e.message}"
                    }
                }
            }
        }
        
        stage('SCP File Transfer') {
            steps {
                script {
                    try {
                        sh "scp -T -P 7774 -o StrictHostKeyChecking=no /var/lib/jenkins/workspace/testiopex/target/supportfirst-api-service-0.0.1.war ${params.USERNAME}@${params.IP_ADDRESS}:/opt/supportfirst/test"
                    } catch (Exception e) {
                        error "Failed to transfer file via SCP: ${e.message}"
                    }
                }
            }
        }
        
        stage('Start Application') {
            steps {
                script {
                    try {
                        sh "ssh -p 7774 ${params.USERNAME}@${params.IP_ADDRESS} 'cd /opt/supportfirst/test && nohup java -jar supportfirst-api-service-0.0.1.war'"
                    } catch (Exception e) {
                        error "Failed to start application via SSH: ${e.message}"
                    }
                }
            }
        }
        
        stage('Check for New Commits') {
            steps {
                sh '''
                # Set the branch name
                BRANCH_NAME="your_branch_name"

                # Get the latest commit hash for the branch
                LATEST_COMMIT=$(git rev-parse HEAD)

                # Get the previous commit hash from the last time the cron job ran
                LAST_COMMIT=$(cat last_commit.txt)

                # Check if there are any new commits since the last run
                if [ "$LATEST_COMMIT" != "$LAST_COMMIT" ]; then
                    echo "New commits detected. Starting cron job..."

                    # Update the last commit file with the latest commit hash
                    echo "$LATEST_COMMIT" > last_commit.txt

                    # Run your cron job here
                    # For example:
                    # /path/to/cron_job.sh
                else
                    echo "No new commits. Exiting without running the cron job."
                fi
                '''
            }
        }
    }
    
    post {
        always {
            script {
                def projectName = env.JOB_NAME
                def buildNumber = env.BUILD_NUMBER
                def buildUrl = env.BUILD_URL
                def subject = currentBuild.result == 'SUCCESS' ? 'Build Successful' : 'Build Failed'
                def body = currentBuild.result == 'SUCCESS' ? "Hello Team,\nThe build to the staging environment was successful.\nProject: ${projectName}\nBuild Number: ${buildNumber}\nURL: ${buildUrl}" : "Hello Team,\nThe build to the staging environment failed.\nProject: ${projectName}\nBuild Number: ${buildNumber}\nURL: ${buildUrl}"
                
                // Send email notification
                emailext (
                    to: 'balasubramaniyan.d@iopex.com',
                    subject: subject,
                    body: body
                )
            }
        }
    }
}
